import { resolve, relative } from 'path';
import { ensureDir, writeJson, writeText } from '../utils/fs.js';
import { isoTimestamp } from '../utils/time.js';
import { localeBriefTemplates } from '../data/localeBriefs.js';

function renderLocaleSection(locale, template) {
  const regulatoryNotes = template?.regulatoryNotes ?? [];
  const toneNotes = template?.tone ?? [];

  const lines = [`### ${template?.name ?? locale} (${locale})`, ''];

  if (regulatoryNotes.length) {
    lines.push('**Regulatory Focus:**');
    for (const note of regulatoryNotes) {
      lines.push(`- ${note}`);
    }
    lines.push('');
  }

  if (toneNotes.length) {
    lines.push('**Messaging & Tone Guardrails:**');
    for (const note of toneNotes) {
      lines.push(`- ${note}`);
    }
    lines.push('');
  }

  if (!regulatoryNotes.length && !toneNotes.length) {
    lines.push('- No locale-specific guidance captured in templates.');
    lines.push('');
  }

  return lines.join('\n');
}

/**
 * Persist compliance and retention documentation alongside agent log evidence.
 * @param {object} params
 * @param {string} params.runRoot
 * @param {string} params.runTimestamp
 * @param {string} params.taskId
 * @param {string[]} params.locales
 * @param {string} params.baselineLocale
 * @param {object} params.reviewer
 * @param {object} params.copySummary
 * @param {object} params.mediaSummary
 * @param {object} params.uxSummary
 * @returns {Promise<object>} paths to compliance artifacts
 */
export async function runComplianceCheck({
  runRoot,
  runTimestamp,
  taskId,
  locales,
  baselineLocale,
  reviewer,
  copySummary,
  mediaSummary,
  uxSummary,
}) {
  const timestamp = isoTimestamp();

  const docDir = resolve(process.cwd(), 'docs', 'localization');
  await ensureDir(docDir);
  const docPath = resolve(docDir, 'compliance.md');

  const localeSections = locales
    .map((locale) => renderLocaleSection(locale, localeBriefTemplates[locale]))
    .join('\n');

  const complianceDoc = [
    '# Localization Compliance & Retention Posture',
    '',
    `Last updated: ${timestamp}`,
    '',
    `- Task ID: ${taskId}`,
    `- Run ID: ${runTimestamp}`,
    `- Baseline Locale: ${baselineLocale}`,
    `- Reviewer of Record: ${reviewer.name} (${reviewer.id})`,
    `- Locales Covered: ${locales.join(', ')}`,
    '',
    '## Data Retention Policy',
    '',
    '- Retain `.runs/0002/` artifacts locally for 90 days, mirroring them to `s3://localization-mvp-runs/` after day 30 for long-term storage.',
    '- Keep stitched export bundles under `exports/localization-mvp/` for 30 days to support partner hand-off and QA.',
    '- Redact reviewer PII from logs before public sharing; internal logs maintain reviewer IDs for auditability.',
    '',
    '## Audit Trail Coverage',
    '',
    '- `run.json` captures agent versions, prompts, and artifact paths for traceability.',
    '- Change log manifests enumerate reviewer decisions with ISO timestamps.',
    '- Guardrail logs (spec, lint, eval) are archived under `.runs/0002/<timestamp>/guardrails/`.',
    '- Compliance check log (this run) records document generation and outstanding actions.',
    '',
    '## Locale Compliance Snapshot',
    '',
    localeSections,
    '## Outstanding Actions',
    '',
    '- Confirm Japanese locale imagery rights prior to pilot launch.',
    '- Schedule quarterly review with Legal to refresh regulatory references.',
    '- Backfill data processing agreements for UK/EU tenants before extending beta.',
    '',
    '## Change Log Context',
    '',
    `- Copy changes pending review: ${copySummary?.totals?.requiresReview ?? 0}`,
    `- Media recommendations pending review: ${mediaSummary?.totals?.requiresReview ?? 0}`,
    `- UX recommendations pending review: ${uxSummary?.totals?.requiresReview ?? 0}`,
    '',
    'Document automatically generated by compliance check agent. Update manually if legal guidance changes.',
    '',
  ].join('\n');

  await writeText(docPath, complianceDoc);

  const agentsDir = resolve(runRoot, 'agents');
  await ensureDir(agentsDir);
  const logPath = resolve(agentsDir, 'compliance-check.log');
  const logLines = [
    `[INFO] ${timestamp} :: compliance_doc=${relative(process.cwd(), docPath)}`,
    `[INFO] ${timestamp} :: locales=${locales.join(', ')}`,
    `[INFO] ${timestamp} :: pending copy=${copySummary?.totals?.requiresReview ?? 0} media=${mediaSummary?.totals?.requiresReview ?? 0} ux=${uxSummary?.totals?.requiresReview ?? 0}`,
  ];

  await writeText(logPath, logLines.join('\n') + '\n');

  const manifest = {
    taskId,
    runId: runTimestamp,
    recordedAt: timestamp,
    doc: relative(process.cwd(), docPath),
    log: relative(process.cwd(), logPath),
    locales,
    pendingReviews: {
      copy: copySummary?.totals?.requiresReview ?? 0,
      media: mediaSummary?.totals?.requiresReview ?? 0,
      ux: uxSummary?.totals?.requiresReview ?? 0,
    },
  };

  const manifestPath = resolve(agentsDir, 'compliance-manifest.json');
  await writeJson(manifestPath, manifest);

  return {
    docPath,
    logPath,
    manifestPath,
    manifest,
  };
}
